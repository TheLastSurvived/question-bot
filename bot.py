import sqlite3
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    Updater, 
    CommandHandler, 
    MessageHandler, 
    CallbackContext, 
    CallbackQueryHandler,
    filters
)
from telegram.ext.filters import TEXT, COMMAND

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = ''
DB_NAME = 'quiz_bot.db'
YOUR_ADMIN_ID = 123456789 # id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            answered BOOLEAN DEFAULT 0
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            score INTEGER DEFAULT 0
        )
    ''')
    
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
def add_user(user):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, score)
        VALUES (?, ?, ?, ?, 0)
    ''', (user.id, user.username, user.first_name, user.last_name))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def get_random_question():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, question, answer FROM questions WHERE answered = 0
    ''')
    
    questions = cursor.fetchall()
    conn.close()
    
    if questions:
        return random.choice(questions)
    return None

# –ü–æ–º–µ—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
def mark_question_answered(question_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE questions SET answered = 1 WHERE id = ?
    ''', (question_id,))
    
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def add_score(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE users SET score = score + 1 WHERE user_id = ?
    ''', (user_id,))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
def get_leaderboard():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT username, first_name, last_name, score FROM users
        ORDER BY score DESC
        LIMIT 10
    ''')
    
    leaders = cursor.fetchall()
    conn.close()
    
    return leaders

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
def add_question(question, answer):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT INTO questions (question, answer) VALUES (?, ?)
    ''', (question, answer))
    
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    add_user(user)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. "
        "–ò—Å–ø–æ–ª—å–∑—É–π /quiz —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ /leaderboard —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
async def quiz(update: Update, context: CallbackContext):
    chat = update.effective_chat
    user = update.effective_user
    add_user(user)
    
    question_data = get_random_question()
    
    if question_data:
        question_id, question, answer = question_data
        context.chat_data['current_question'] = (question_id, answer)
        
        await chat.send_message(
            f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
            "–û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —á–∞—Ç–µ! –ü–µ—Ä–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç –±–∞–ª–ª."
        )
    else:
        await chat.send_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤)
async def check_answer(update: Update, context: CallbackContext):
    chat = update.effective_chat
    user = update.effective_user
    message_text = update.message.text.lower().strip()
    
    if 'current_question' not in context.chat_data:
        return
    
    question_id, correct_answer = context.chat_data['current_question']
    correct_answer = correct_answer.lower().strip()
    
    if message_text.lower() == correct_answer.lower():
        add_user(user)
        add_score(user.id)
        mark_question_answered(question_id)
        
        del context.chat_data['current_question']
        
        await chat.send_message(
            f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ, {user.first_name}! üéâ\n"
            f"–¢—ã –ø–æ–ª—É—á–∞–µ—à—å 1 –±–∞–ª–ª. –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {get_user_score(user.id)}"
        )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_score(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    return result[0] if result else 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard
async def leaderboard(update: Update, context: CallbackContext):
    leaders = get_leaderboard()
    
    if not leaders:
        await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")
        return
    
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n"
    for i, (username, first_name, last_name, score) in enumerate(leaders, 1):
        name = username or f"{first_name} {last_name}".strip()
        leaderboard_text += f"{i}. {name}: {score} –±–∞–ª–ª–æ–≤\n"
    
    await update.message.reply_text(leaderboard_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_question (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def add_question_command(update: Update, context: CallbackContext):
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ YOUR_ADMIN_ID –Ω–∞ –≤–∞—à ID)
    if user.id != YOUR_ADMIN_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_question '–í–æ–ø—Ä–æ—Å' '–û—Ç–≤–µ—Ç'")
        return
    
    question = ' '.join(context.args[:-1])
    answer = context.args[-1]
    
    add_question(question, answer)
    await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {question} (–û—Ç–≤–µ—Ç: {answer})")

def main():
    init_db()
    
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quiz", quiz))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("add_question", add_question_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer))
    
    application.run_polling()

if __name__ == '__main__':
    main()
